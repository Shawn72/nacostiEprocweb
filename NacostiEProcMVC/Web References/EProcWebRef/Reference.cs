//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace NacostiEProcMVC.EProcWebRef {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="eprocurement_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement")]
    public partial class eprocurement : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback FnRegisterVendorOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetPassOperationCompleted;
        
        private System.Threading.SendOrPostCallback FnApplyPreQualificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentYearOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApplyRFQOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApplyRFQOLDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDirectorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback FnApplyforTenderOperationCompleted;
        
        private System.Threading.SendOrPostCallback FnCountOpenTendersOperationCompleted;
        
        private System.Threading.SendOrPostCallback FnCountAppliedTendersOperationCompleted;
        
        private System.Threading.SendOrPostCallback FnCountTendersAwardedOperationCompleted;
        
        private System.Threading.SendOrPostCallback FnApplyforOpenTenderOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public eprocurement() {
            this.Url = global::NacostiEProcMVC.Properties.Settings.Default.NacostiEProcMVC_EProcWebRef_eprocurement;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event FnRegisterVendorCompletedEventHandler FnRegisterVendorCompleted;
        
        /// <remarks/>
        public event ResetPassCompletedEventHandler ResetPassCompleted;
        
        /// <remarks/>
        public event FnApplyPreQualificationCompletedEventHandler FnApplyPreQualificationCompleted;
        
        /// <remarks/>
        public event GetCurrentYearCompletedEventHandler GetCurrentYearCompleted;
        
        /// <remarks/>
        public event ApplyRFQCompletedEventHandler ApplyRFQCompleted;
        
        /// <remarks/>
        public event ApplyRFQOLDCompletedEventHandler ApplyRFQOLDCompleted;
        
        /// <remarks/>
        public event ActivateAccountCompletedEventHandler ActivateAccountCompleted;
        
        /// <remarks/>
        public event AddDirectorsCompletedEventHandler AddDirectorsCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event FnApplyforTenderCompletedEventHandler FnApplyforTenderCompleted;
        
        /// <remarks/>
        public event FnCountOpenTendersCompletedEventHandler FnCountOpenTendersCompleted;
        
        /// <remarks/>
        public event FnCountAppliedTendersCompletedEventHandler FnCountAppliedTendersCompleted;
        
        /// <remarks/>
        public event FnCountTendersAwardedCompletedEventHandler FnCountTendersAwardedCompleted;
        
        /// <remarks/>
        public event FnApplyforOpenTenderCompletedEventHandler FnApplyforOpenTenderCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/eprocurement:FnRegisterVendor", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", ResponseElementName="FnRegisterVendor_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string FnRegisterVendor(string vendorName, string supplierCategory, string country, string postAddress, string postCode, string phoneNumber, string emailAddress, string kraPin, string taxCompliance, string password, string confirmPassword) {
            object[] results = this.Invoke("FnRegisterVendor", new object[] {
                        vendorName,
                        supplierCategory,
                        country,
                        postAddress,
                        postCode,
                        phoneNumber,
                        emailAddress,
                        kraPin,
                        taxCompliance,
                        password,
                        confirmPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FnRegisterVendorAsync(string vendorName, string supplierCategory, string country, string postAddress, string postCode, string phoneNumber, string emailAddress, string kraPin, string taxCompliance, string password, string confirmPassword) {
            this.FnRegisterVendorAsync(vendorName, supplierCategory, country, postAddress, postCode, phoneNumber, emailAddress, kraPin, taxCompliance, password, confirmPassword, null);
        }
        
        /// <remarks/>
        public void FnRegisterVendorAsync(string vendorName, string supplierCategory, string country, string postAddress, string postCode, string phoneNumber, string emailAddress, string kraPin, string taxCompliance, string password, string confirmPassword, object userState) {
            if ((this.FnRegisterVendorOperationCompleted == null)) {
                this.FnRegisterVendorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFnRegisterVendorOperationCompleted);
            }
            this.InvokeAsync("FnRegisterVendor", new object[] {
                        vendorName,
                        supplierCategory,
                        country,
                        postAddress,
                        postCode,
                        phoneNumber,
                        emailAddress,
                        kraPin,
                        taxCompliance,
                        password,
                        confirmPassword}, this.FnRegisterVendorOperationCompleted, userState);
        }
        
        private void OnFnRegisterVendorOperationCompleted(object arg) {
            if ((this.FnRegisterVendorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FnRegisterVendorCompleted(this, new FnRegisterVendorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/eprocurement:ResetPass", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", ResponseElementName="ResetPass_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string ResetPass(string emailAddress) {
            object[] results = this.Invoke("ResetPass", new object[] {
                        emailAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ResetPassAsync(string emailAddress) {
            this.ResetPassAsync(emailAddress, null);
        }
        
        /// <remarks/>
        public void ResetPassAsync(string emailAddress, object userState) {
            if ((this.ResetPassOperationCompleted == null)) {
                this.ResetPassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetPassOperationCompleted);
            }
            this.InvokeAsync("ResetPass", new object[] {
                        emailAddress}, this.ResetPassOperationCompleted, userState);
        }
        
        private void OnResetPassOperationCompleted(object arg) {
            if ((this.ResetPassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetPassCompleted(this, new ResetPassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/eprocurement:FnApplyPreQualification", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", ResponseElementName="FnApplyPreQualification_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string FnApplyPreQualification(string contactNo, string supplierCategory, string password, string fiscalYear) {
            object[] results = this.Invoke("FnApplyPreQualification", new object[] {
                        contactNo,
                        supplierCategory,
                        password,
                        fiscalYear});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FnApplyPreQualificationAsync(string contactNo, string supplierCategory, string password, string fiscalYear) {
            this.FnApplyPreQualificationAsync(contactNo, supplierCategory, password, fiscalYear, null);
        }
        
        /// <remarks/>
        public void FnApplyPreQualificationAsync(string contactNo, string supplierCategory, string password, string fiscalYear, object userState) {
            if ((this.FnApplyPreQualificationOperationCompleted == null)) {
                this.FnApplyPreQualificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFnApplyPreQualificationOperationCompleted);
            }
            this.InvokeAsync("FnApplyPreQualification", new object[] {
                        contactNo,
                        supplierCategory,
                        password,
                        fiscalYear}, this.FnApplyPreQualificationOperationCompleted, userState);
        }
        
        private void OnFnApplyPreQualificationOperationCompleted(object arg) {
            if ((this.FnApplyPreQualificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FnApplyPreQualificationCompleted(this, new FnApplyPreQualificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/eprocurement:GetCurrentYear", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", ResponseElementName="GetCurrentYear_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string GetCurrentYear() {
            object[] results = this.Invoke("GetCurrentYear", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentYearAsync() {
            this.GetCurrentYearAsync(null);
        }
        
        /// <remarks/>
        public void GetCurrentYearAsync(object userState) {
            if ((this.GetCurrentYearOperationCompleted == null)) {
                this.GetCurrentYearOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentYearOperationCompleted);
            }
            this.InvokeAsync("GetCurrentYear", new object[0], this.GetCurrentYearOperationCompleted, userState);
        }
        
        private void OnGetCurrentYearOperationCompleted(object arg) {
            if ((this.GetCurrentYearCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentYearCompleted(this, new GetCurrentYearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/eprocurement:ApplyRFQ", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", ResponseElementName="ApplyRFQ_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string ApplyRFQ(string contactNo, string password, decimal quantity, decimal amount, string rfqNo) {
            object[] results = this.Invoke("ApplyRFQ", new object[] {
                        contactNo,
                        password,
                        quantity,
                        amount,
                        rfqNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ApplyRFQAsync(string contactNo, string password, decimal quantity, decimal amount, string rfqNo) {
            this.ApplyRFQAsync(contactNo, password, quantity, amount, rfqNo, null);
        }
        
        /// <remarks/>
        public void ApplyRFQAsync(string contactNo, string password, decimal quantity, decimal amount, string rfqNo, object userState) {
            if ((this.ApplyRFQOperationCompleted == null)) {
                this.ApplyRFQOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplyRFQOperationCompleted);
            }
            this.InvokeAsync("ApplyRFQ", new object[] {
                        contactNo,
                        password,
                        quantity,
                        amount,
                        rfqNo}, this.ApplyRFQOperationCompleted, userState);
        }
        
        private void OnApplyRFQOperationCompleted(object arg) {
            if ((this.ApplyRFQCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplyRFQCompleted(this, new ApplyRFQCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/eprocurement:ApplyRFQOLD", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", ResponseElementName="ApplyRFQOLD_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string ApplyRFQOLD(string contactNo, string password, decimal quantity, decimal amount, string rfqNo) {
            object[] results = this.Invoke("ApplyRFQOLD", new object[] {
                        contactNo,
                        password,
                        quantity,
                        amount,
                        rfqNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ApplyRFQOLDAsync(string contactNo, string password, decimal quantity, decimal amount, string rfqNo) {
            this.ApplyRFQOLDAsync(contactNo, password, quantity, amount, rfqNo, null);
        }
        
        /// <remarks/>
        public void ApplyRFQOLDAsync(string contactNo, string password, decimal quantity, decimal amount, string rfqNo, object userState) {
            if ((this.ApplyRFQOLDOperationCompleted == null)) {
                this.ApplyRFQOLDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplyRFQOLDOperationCompleted);
            }
            this.InvokeAsync("ApplyRFQOLD", new object[] {
                        contactNo,
                        password,
                        quantity,
                        amount,
                        rfqNo}, this.ApplyRFQOLDOperationCompleted, userState);
        }
        
        private void OnApplyRFQOLDOperationCompleted(object arg) {
            if ((this.ApplyRFQOLDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplyRFQOLDCompleted(this, new ApplyRFQOLDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/eprocurement:ActivateAccount", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", ResponseElementName="ActivateAccount_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string ActivateAccount(string userCode, string key, string password, string confirmpassword) {
            object[] results = this.Invoke("ActivateAccount", new object[] {
                        userCode,
                        key,
                        password,
                        confirmpassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateAccountAsync(string userCode, string key, string password, string confirmpassword) {
            this.ActivateAccountAsync(userCode, key, password, confirmpassword, null);
        }
        
        /// <remarks/>
        public void ActivateAccountAsync(string userCode, string key, string password, string confirmpassword, object userState) {
            if ((this.ActivateAccountOperationCompleted == null)) {
                this.ActivateAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateAccountOperationCompleted);
            }
            this.InvokeAsync("ActivateAccount", new object[] {
                        userCode,
                        key,
                        password,
                        confirmpassword}, this.ActivateAccountOperationCompleted, userState);
        }
        
        private void OnActivateAccountOperationCompleted(object arg) {
            if ((this.ActivateAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateAccountCompleted(this, new ActivateAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/eprocurement:AddDirectors", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", ResponseElementName="AddDirectors_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string AddDirectors(string contactNo, string password, string director1, string director2, string director3) {
            object[] results = this.Invoke("AddDirectors", new object[] {
                        contactNo,
                        password,
                        director1,
                        director2,
                        director3});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddDirectorsAsync(string contactNo, string password, string director1, string director2, string director3) {
            this.AddDirectorsAsync(contactNo, password, director1, director2, director3, null);
        }
        
        /// <remarks/>
        public void AddDirectorsAsync(string contactNo, string password, string director1, string director2, string director3, object userState) {
            if ((this.AddDirectorsOperationCompleted == null)) {
                this.AddDirectorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDirectorsOperationCompleted);
            }
            this.InvokeAsync("AddDirectors", new object[] {
                        contactNo,
                        password,
                        director1,
                        director2,
                        director3}, this.AddDirectorsOperationCompleted, userState);
        }
        
        private void OnAddDirectorsOperationCompleted(object arg) {
            if ((this.AddDirectorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDirectorsCompleted(this, new AddDirectorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/eprocurement:ChangePassword", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", ResponseElementName="ChangePassword_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string ChangePassword(string contactNo, string currentPassword, string newPassword, string confirmPassword) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        contactNo,
                        currentPassword,
                        newPassword,
                        confirmPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string contactNo, string currentPassword, string newPassword, string confirmPassword) {
            this.ChangePasswordAsync(contactNo, currentPassword, newPassword, confirmPassword, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string contactNo, string currentPassword, string newPassword, string confirmPassword, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        contactNo,
                        currentPassword,
                        newPassword,
                        confirmPassword}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/eprocurement:FnApplyforTender", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", ResponseElementName="FnApplyforTender_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string FnApplyforTender(string tenderNo, decimal amount, string vendorNo, string email) {
            object[] results = this.Invoke("FnApplyforTender", new object[] {
                        tenderNo,
                        amount,
                        vendorNo,
                        email});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FnApplyforTenderAsync(string tenderNo, decimal amount, string vendorNo, string email) {
            this.FnApplyforTenderAsync(tenderNo, amount, vendorNo, email, null);
        }
        
        /// <remarks/>
        public void FnApplyforTenderAsync(string tenderNo, decimal amount, string vendorNo, string email, object userState) {
            if ((this.FnApplyforTenderOperationCompleted == null)) {
                this.FnApplyforTenderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFnApplyforTenderOperationCompleted);
            }
            this.InvokeAsync("FnApplyforTender", new object[] {
                        tenderNo,
                        amount,
                        vendorNo,
                        email}, this.FnApplyforTenderOperationCompleted, userState);
        }
        
        private void OnFnApplyforTenderOperationCompleted(object arg) {
            if ((this.FnApplyforTenderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FnApplyforTenderCompleted(this, new FnApplyforTenderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/eprocurement:FnCountOpenTenders", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", ResponseElementName="FnCountOpenTenders_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public int FnCountOpenTenders() {
            object[] results = this.Invoke("FnCountOpenTenders", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void FnCountOpenTendersAsync() {
            this.FnCountOpenTendersAsync(null);
        }
        
        /// <remarks/>
        public void FnCountOpenTendersAsync(object userState) {
            if ((this.FnCountOpenTendersOperationCompleted == null)) {
                this.FnCountOpenTendersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFnCountOpenTendersOperationCompleted);
            }
            this.InvokeAsync("FnCountOpenTenders", new object[0], this.FnCountOpenTendersOperationCompleted, userState);
        }
        
        private void OnFnCountOpenTendersOperationCompleted(object arg) {
            if ((this.FnCountOpenTendersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FnCountOpenTendersCompleted(this, new FnCountOpenTendersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/eprocurement:FnCountAppliedTenders", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", ResponseElementName="FnCountAppliedTenders_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public int FnCountAppliedTenders(string vendorNo) {
            object[] results = this.Invoke("FnCountAppliedTenders", new object[] {
                        vendorNo});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void FnCountAppliedTendersAsync(string vendorNo) {
            this.FnCountAppliedTendersAsync(vendorNo, null);
        }
        
        /// <remarks/>
        public void FnCountAppliedTendersAsync(string vendorNo, object userState) {
            if ((this.FnCountAppliedTendersOperationCompleted == null)) {
                this.FnCountAppliedTendersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFnCountAppliedTendersOperationCompleted);
            }
            this.InvokeAsync("FnCountAppliedTenders", new object[] {
                        vendorNo}, this.FnCountAppliedTendersOperationCompleted, userState);
        }
        
        private void OnFnCountAppliedTendersOperationCompleted(object arg) {
            if ((this.FnCountAppliedTendersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FnCountAppliedTendersCompleted(this, new FnCountAppliedTendersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/eprocurement:FnCountTendersAwarded", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", ResponseElementName="FnCountTendersAwarded_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public int FnCountTendersAwarded(string vendorNo) {
            object[] results = this.Invoke("FnCountTendersAwarded", new object[] {
                        vendorNo});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void FnCountTendersAwardedAsync(string vendorNo) {
            this.FnCountTendersAwardedAsync(vendorNo, null);
        }
        
        /// <remarks/>
        public void FnCountTendersAwardedAsync(string vendorNo, object userState) {
            if ((this.FnCountTendersAwardedOperationCompleted == null)) {
                this.FnCountTendersAwardedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFnCountTendersAwardedOperationCompleted);
            }
            this.InvokeAsync("FnCountTendersAwarded", new object[] {
                        vendorNo}, this.FnCountTendersAwardedOperationCompleted, userState);
        }
        
        private void OnFnCountTendersAwardedOperationCompleted(object arg) {
            if ((this.FnCountTendersAwardedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FnCountTendersAwardedCompleted(this, new FnCountTendersAwardedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/eprocurement:FnApplyforOpenTender", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", ResponseElementName="FnApplyforOpenTender_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/eprocurement", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string FnApplyforOpenTender(string tenderNo, decimal amount, string contactNo, string email) {
            object[] results = this.Invoke("FnApplyforOpenTender", new object[] {
                        tenderNo,
                        amount,
                        contactNo,
                        email});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FnApplyforOpenTenderAsync(string tenderNo, decimal amount, string contactNo, string email) {
            this.FnApplyforOpenTenderAsync(tenderNo, amount, contactNo, email, null);
        }
        
        /// <remarks/>
        public void FnApplyforOpenTenderAsync(string tenderNo, decimal amount, string contactNo, string email, object userState) {
            if ((this.FnApplyforOpenTenderOperationCompleted == null)) {
                this.FnApplyforOpenTenderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFnApplyforOpenTenderOperationCompleted);
            }
            this.InvokeAsync("FnApplyforOpenTender", new object[] {
                        tenderNo,
                        amount,
                        contactNo,
                        email}, this.FnApplyforOpenTenderOperationCompleted, userState);
        }
        
        private void OnFnApplyforOpenTenderOperationCompleted(object arg) {
            if ((this.FnApplyforOpenTenderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FnApplyforOpenTenderCompleted(this, new FnApplyforOpenTenderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FnRegisterVendorCompletedEventHandler(object sender, FnRegisterVendorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FnRegisterVendorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FnRegisterVendorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ResetPassCompletedEventHandler(object sender, ResetPassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetPassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetPassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FnApplyPreQualificationCompletedEventHandler(object sender, FnApplyPreQualificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FnApplyPreQualificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FnApplyPreQualificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetCurrentYearCompletedEventHandler(object sender, GetCurrentYearCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentYearCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentYearCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ApplyRFQCompletedEventHandler(object sender, ApplyRFQCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplyRFQCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApplyRFQCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ApplyRFQOLDCompletedEventHandler(object sender, ApplyRFQOLDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplyRFQOLDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApplyRFQOLDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ActivateAccountCompletedEventHandler(object sender, ActivateAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AddDirectorsCompletedEventHandler(object sender, AddDirectorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddDirectorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddDirectorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FnApplyforTenderCompletedEventHandler(object sender, FnApplyforTenderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FnApplyforTenderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FnApplyforTenderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FnCountOpenTendersCompletedEventHandler(object sender, FnCountOpenTendersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FnCountOpenTendersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FnCountOpenTendersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FnCountAppliedTendersCompletedEventHandler(object sender, FnCountAppliedTendersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FnCountAppliedTendersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FnCountAppliedTendersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FnCountTendersAwardedCompletedEventHandler(object sender, FnCountTendersAwardedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FnCountTendersAwardedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FnCountTendersAwardedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FnApplyforOpenTenderCompletedEventHandler(object sender, FnApplyforOpenTenderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FnApplyforOpenTenderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FnApplyforOpenTenderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591